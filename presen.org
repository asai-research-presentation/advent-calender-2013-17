# -*- truncate-lines : t -*-
#+title: 一階述語論理ベースのプランニング と lisp
#+author: Masataro Asai
#+OPTIONS:   H:4 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc skip:nil
#+infojs_opt: view:nil path:./org-info.js toc:nil ltoc:nil ftoc:nil
#+infojs_opt: mouse:#eeeeee buttons:nil
#+HTML_MATHJAX: path:"mathjax/MathJax.js"
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="animation.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="colors-and-fonts.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+HTML_HEAD: <script type="text/javascript" src="./jquery.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="./code.js"></script>
#+HTML_POSTAMBLE: nil

#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: svg file:img/%s.svg
#+LINK: jpg file:img/%s.jpg

#+BEGIN_outline-text-1
#+BEGIN_CENTER

[[http://qiita.com/advent-calendar/2013/lisp][Lisp Advent Calender 2013]] day 17

書いた人: guicho2.71828 (浅井 政太郎)
Special Thanks: Alex福永 先生

+ 知っている方なら、内容に過度な期待はしないでください。
+ コンピュータサイエンス学科の人なら習ってるはず(?)
+ よろしくおねがいします。

Press "n" to proceed
Keyboard Help: [[http://guicho271828.github.io/another-org-info/][another-org-info @ github]]

#+END_CENTER
#+END_outline-text-1

* 

この記事は今M1の自分の研究内容の紹介みたいなものです。
しかも自分はこの分野に入ってまだ半年ぐらい。
理解が足りず間違っている箇所があってもご勘弁を・・・。

さて。

昨今、他の言語がweb系の技術で躍進している傍ら、
数多のLisper達が、他言語に遅れをとっては居られないと
(特にライブラリ面で)動きを加速させている感じがあります。
quicklispが出てきたから^* ですかね。

#+BEGIN_NOTE
(*) なお自分が大学一年の時(2009)は、まだasdf-installしかありませんでした。
#+END_NOTE

* 

#+BEGIN_XLARGE
でも とはいえ
#+BEGIN_CENTER
Lisp の本命は人工知能です。
#+END_CENTER
#+END_XLARGE

人工知能の分野は1960年あたりにできた
まだ始まって50年ちょっとの若い分野です。

できたばかりの人工知能の分野の中心で、
Lisp は John McCarthyによって考えだされ、
また Guy L. Steele, Jr によって生みだされたのでした。

* Lisp の はじまり

#+BEGIN_CENTER
AI Memo 8

McCarthy, J.
[[http://dspace.mit.edu/handle/1721.1/6096][Recursive functions of symbolic expressions and their computation by machine]]
/Communications of the ACM/, 1959
#+END_CENTER

時代背景:

1. プログラムはパンチカード式
2. FORTRAN 登場は 1956年 ALGOL 登場は 1958年
3. 「リスト構造」の発明 1957年
4. 計算資源に触れることができた人間は全世界でもひとにぎり

* 人工知能: 前日譚

その経緯は以下に詳しい。(読むか、あるいは、福永研のゼミに参加するという手もあります)

#+BEGIN_CENTER
McCarthy,J.  [[http://scholar.google.co.jp/scholar?q%3DHistory%2Bof%2BLisp%2BJ%2BMcCarthy&btnG%3D&hl%3Den&as_sdt%3D0%252C5][History of Lisp]] 1978
#+END_CENTER

読めばわかります。(あるいは、ゼミに(略))

#+BEGIN_CENTER
1959年, the Dartmouse Summer Research Project on Artificial Intelligence
#+END_CENTER

通称Dartmouse会議。
このミーティングこそが、
「人工知能」という分野(言葉?)が始めて誕生した瞬間です。

会議に参加したMcCarthy は、この時点で、
*Advice Taker* (Programs with Common Sense, 1958) という
仮想的な(未実装の)プログラムを用いて、
「強い知能プログラムの満たすべき条件」の草案を提唱していました。

また、同じく参加していた Herbert Simon, Newell, Shaw らは、
1956年に Logic Theorist^* とよばれる最初の自動定理証明機を作り上げていました。
この論文は、「ヒューリスティック」という概念の強力さを
始めて提唱した論文でもあります。

#+BEGIN_NOTE
*) A Newell, JC Shaw, HA Simon /Empirical explorations of the logic theory machine: a case study in heuristic/ 1956
#+END_NOTE

* Simon, Newell, Shaw: Logic Theory Machine

５つの演算子 /Connective/

: not, or, implies, and, 

combined into more complicated expressions

: (p implies not-p) implies not-p

and there are 5 given axioms(公理) in /Principia Mathematica/

: (p or p) implies p
: p implies (q or p)
: (p or q) implies (q or p)
: [p or (q or r)] implies [q or (p or r)]
: (p implies q) implies [(r or p) implies (r or q)]

* ３つの操作 substitution, replacement, detachment

1. substitution

: p implies (q or p)

=p= に =(q or p)= を代入して

: (p or q) implies [q or (p or q)]

2. replacement

or と implies をいれかえられる

=p implies (q or p)= <-> =not-p or (q or p)=

3. detachment

=A= と =A implies B= が定理(または公理)ならば =B= も定理

Logic Theorist には、入力として「証明したい定理」を与えます。
LTは、先程述べた５つの公理に"様々な順で"上の３つの操作を適用することを
試します。入力として与えられた定理が求められれば、そこに至るまでに必要
だった操作を "Print out" します。 /当時はディスプレイなんてなかったの
で、本当に紙にプリントします。/ 

* ヒューリスティクス

この論文の貢献は、いろいろあると思いますがとにかく無茶苦茶すごくて、
まず、「計算機は定理証明をできる」と示した(初めて?)のがスゴイ。
/Principia Mathematica/ の結構な数の定理を、50年前のコンピュータで証明
させています。

しかも「定理証明はグラフ探索みたいなものだ！」とわかる。

#+BEGIN_RIGHT
[[img:lt.png]]
#+END_RIGHT

さらに、そうしたら、「探索が進むに連れてノードの数が爆発する」ことを発
見するわけです。
これは、ノードごとに、適用できる定理の数が複数あるので、
ノードの数が倍々でどんどん増えて行ってしまうからです。

#+BEGIN_RIGHT
[[img:lt2]]
#+END_RIGHT


* 一階述語論理


* 定理証明

定理証明とは、

+ 前提から
+ 公理を順に適用して行って
+ 結論を導く

ことです。

* プランニング と STRIPS表現


* PDDL


* 探索


* SPACE-Hard

convert to SAT

* プログラム例


http://www4.ncsu.edu/~stamant/simple-planners/simple-planners.html

